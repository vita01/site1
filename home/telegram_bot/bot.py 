import logging
import asyncio
import random

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from openai import OpenAI

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---

OPENROUTER_API_KEY = "—Ç–≤–æ–π_openrouter_api_key"
TELEGRAM_BOT_TOKEN = "—Ç–≤–æ–π_telegram_bot_token"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)

logger = logging.getLogger(__name__)

# –ö–ª–∏–µ–Ω—Ç OpenAI
client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=OPENROUTER_API_KEY,
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤–µ—Å–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏)
user_weights = {}
user_states = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
main_keyboard = ReplyKeyboardMarkup(
    [["üìã –ú–µ–Ω—é", "üìà –í–≤–µ—Å—Ç–∏ –≤–µ—Å"], ["üí° –°–æ–≤–µ—Ç", "üìÖ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è"]],
    resize_keyboard=True,
)

# --- –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏ –º–µ–Ω—é"""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–¥–∏–µ—Ç–æ–ª–æ–≥ ü§ñü•ó\n"
        "–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=main_keyboard,
    )

async def daily_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–º–µ—Ä –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å"""
    menu = (
        "üçΩÔ∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å:\n\n"
        "ü•£ –ó–∞–≤—Ç—Ä–∞–∫: –æ–≤—Å—è–Ω–∫–∞ —Å —è–≥–æ–¥–∞–º–∏ –∏ –æ—Ä–µ—Ö–∞–º–∏\n"
        "üçó –û–±–µ–¥: –∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å –≥—Ä–µ—á–∫–æ–π –∏ –æ–≤–æ—â–∞–º–∏\n"
        "ü•ó –£–∂–∏–Ω: —Å–∞–ª–∞—Ç —Å —Ç—É–Ω—Ü–æ–º –∏ —è–π—Ü–æ–º\n"
        "üçè –ü–µ—Ä–µ–∫—É—Å—ã: —Ñ—Ä—É–∫—Ç—ã, –π–æ–≥—É—Ä—Ç, –æ—Ä–µ—à–∫–∏"
    )
    await update.message.reply_text(menu)

async def weekly_plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–º–µ—Ä –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    plan = "üìÖ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é:\n"
    for i in range(1, 8):
        plan += f"\n–î–µ–Ω—å {i}:\n- –ó–∞–≤—Ç—Ä–∞–∫: —è–π—Ü–∞ + –æ–≤–æ—â–∏\n- –û–±–µ–¥: —Å—É–ø + –º—è—Å–æ\n- –£–∂–∏–Ω: –∫–µ—Ñ–∏—Ä + —Ç–≤–æ—Ä–æ–≥\n"
    await update.message.reply_text(plan)

motivations = [
    "üí™ –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è! –ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ = –±–æ–ª—å—à–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
    "‚ú® –¢—ã —É–∂–µ –ª—É—á—à–µ, —á–µ–º –≤—á–µ—Ä–∞",
    "üî• –ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —à–∞–Ω—Å —Å—Ç–∞—Ç—å —Å–∏–ª—å–Ω–µ–µ",
    "‚è≥ –¢–µ—Ä–ø–µ–Ω–∏–µ –∏ —É–ø–æ—Ä—Å—Ç–≤–æ ‚Äî –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É",
    "üåü –¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å –±—ã—Ç—å –∑–¥–æ—Ä–æ–≤—ã–º!",
]

async def motivation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞"""
    await update.message.reply_text(random.choice(motivations))

async def get_openai_response(prompt: str) -> str:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ OpenAI (—Å run_in_executor)"""
    loop = asyncio.get_event_loop()

    def sync_call():
        return client.chat.completions.create(
            model="openai/gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
        )

    response = await loop.run_in_executor(None, sync_call)
    return response.choices[0].message.content.strip()

async def save_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    text = update.message.text
    user_id = update.message.from_user.id

    try:
        weight = float(text.replace(",", "."))
        previous = user_weights.get(user_id)
        user_weights[user_id] = weight
        user_states[user_id] = None  # —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è

        if previous:
            delta = weight - previous
            change = f"üìâ –¢—ã —Å–±—Ä–æ—Å–∏–ª {abs(delta):.1f} –∫–≥!" if delta < 0 else f"üìà –¢—ã –Ω–∞–±—Ä–∞–ª {delta:.1f} –∫–≥."
            await update.message.reply_text(
                f"‚úÖ –í–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\nüìä –ü—Ä–µ–¥—ã–¥—É—â–∏–π: {previous} –∫–≥\n{change}"
            )
        else:
            await update.message.reply_text("‚úÖ –í–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–Ω–µ—Å—ë–Ω.")
    except ValueError:
        await update.message.reply_text("‚ùó–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∏—Å–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 85.3")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_text = update.message.text
    user_id = update.message.from_user.id

    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –≤–µ—Å–∞
    if user_states.get(user_id) == "waiting_for_weight":
        await save_weight(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ –º–µ–Ω—é
    if user_text == "üìã –ú–µ–Ω—é":
        await daily_menu(update, context)
        return
    elif user_text == "üìà –í–≤–µ—Å—Ç–∏ –≤–µ—Å":
        user_states[user_id] = "waiting_for_weight"
        await update.message.reply_text("–í–≤–µ–¥–∏ —Ç–µ–∫—É—â–∏–π –≤–µ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: 85.2")
        return
    elif user_text == "üí° –°–æ–≤–µ—Ç":
        await motivation(update, context)
        return
    elif user_text == "üìÖ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è":
        await weekly_plan(update, context)
        return

    # –ò–ò –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø—Ä–æ—á–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    prompt = (
        "–¢—ã ‚Äî –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é, –¥–∏–µ—Ç–∞–º –∏ –ø–æ—Ö—É–¥–µ–Ω–∏—é. "
        "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
        "–î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –æ—Ç–≤–µ—Ç:\n" + user_text
    )

    try:
        answer = await get_openai_response(prompt)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        answer = "‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò."

    await update.message.reply_text(answer)

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---

def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
